# Copyright (c) 2009 Guilherme Semente and contributors
#
# This file is part of Django Smuggler.
#
# Django Smuggler is free software under terms of the GNU Lesser
# General Public License version 3 (LGPLv3) as published by the Free
# Software Foundation. See the file README for copying conditions.
import os.path
import tempfile
from datetime import datetime

from django.contrib import messages
from django.contrib.admin.helpers import AdminForm
from django.contrib.auth.decorators import user_passes_test
from django.core.exceptions import ObjectDoesNotExist, PermissionDenied
from django.core.management.base import CommandError
from django.core.serializers.base import DeserializationError
from django.db import IntegrityError
from django.http import HttpResponseRedirect
from django.utils.encoding import force_str
from django.utils.translation import gettext_lazy as _
from django.utils.translation import ngettext_lazy
from django.views.generic.edit import FormView
#from cryptography.fernet import Fernet

from smuggler import settings
from smuggler.forms import ImportForm
from smuggler.utils import (
    load_fixtures,
    save_uploaded_file_on_disk,
    serialize_to_response,
)

    
def dump_to_response(request, app_label=None, exclude=None, filename_prefix=None):
    """Utility function that dumps the given app/model to an HttpResponse."""
    app_label = app_label or []
    exclude = exclude
    try:
        filename = "%s.%s" % (datetime.now().isoformat(), settings.SMUGGLER_FORMAT)
        if filename_prefix:
            filename = "%s_%s" % (filename_prefix, filename)
        if not isinstance(app_label, list):
            app_label = [app_label]
        response = serialize_to_response(app_label, exclude)
        response["Content-Disposition"] = "attachment; filename=%s" % filename
        return response
    except CommandError as e:
        messages.error(
            request, _("An exception occurred while dumping data: %s") % force_str(e)
        )
    return HttpResponseRedirect(request.build_absolute_uri('Backups').split("dump")[0])
    

def is_superuser(u):
    if u.is_authenticated:
        if u.is_superuser or u.get_username() == 'supervisor':
            return True
        raise PermissionDenied
    return False


        except:
            descripcion = 'Error al salvar la base de datos'
            messages.error(request, "Error al salvar los datos")
            return render(request, 'smuggler/salvarestaura.html', {'list_db': list})
    else:
        save_address_dbs(address)
        list = list_address_db()
        messages.success(request, "Éxito al salvar los datos")
        return render(request, 'salvarestaura.html', {'list_db': list})
    return render(request, 'salvarestaura.html', {'list_db': list})


@permission_required('auth.add_user', login_url='403')
def db_restore(request, name):
    template_name = "smuggler/salvarestaura.html"
    list = list_address_db()
    PASSWORD = '3693'                ##CONTRASEÑA DE LA BD##
    os.putenv('PGPASSWORD', PASSWORD)
    address = "static/db/" + name         ##RUTA DONDE ESTA GUARDADO EL ARCHIVO DE LA BD##
    try:
        subprocess.Popen("psql -h localhost -p 5433 -U postgres -d NOMBRE_ARCHIVO <" + address, shell=True)
    except:
        messages.error(request, "Error al restaurar la base de datos")
        return render(request, 'salvarestaura.html', {'list_db': list})
    else:
        messages.success(request, "Éxito restaurando la base de datos")
        return render(request, 'salvarestaura.html', {'list_db': list})
